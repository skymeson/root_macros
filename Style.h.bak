void setStyle()
{
  gROOT->SetStyle("Plain");
  gStyle->SetPalette(1);
  gStyle->SetTextFont(132);
  gStyle->SetNdivisions(505,"X");
  gStyle->SetNdivisions(505,"Y");
  gStyle->SetTitleFont(132,"X");
  gStyle->SetLabelFont(132,"X");
  gStyle->SetTitleFont(132,"Y");
  gStyle->SetLabelFont(132,"Y");
  gStyle->SetTitleFont(132,"Z");
  gStyle->SetLabelFont(132,"Z");
  gStyle->SetTitleSize(0.05,"X");
  gStyle->SetTitleOffset(1.6,"X");
  gStyle->SetLabelSize(0.05,"X");
  gStyle->SetTitleSize(0.05,"Y");
  gStyle->SetTitleOffset(1.8,"Y");
  gStyle->SetLabelSize(0.05,"Y");
  gStyle->SetTitleSize(0.05,"Z");
  gStyle->SetTitleOffset(1.8,"Z");
  gStyle->SetLabelSize(0.05,"Z");
  gStyle->SetOptStat(0);
  gStyle->SetOptDate(0);
  
  gStyle->SetPadLeftMargin(0.2);
  gStyle->SetPadBottomMargin(0.2);
  gStyle->SetPadTickX(1);
  gStyle->SetPadTickY(1);
}

void setStyleWide()
{
  gROOT->SetStyle("Plain");
  gStyle->SetPalette(1);
  gStyle->SetTextFont(132);
  gStyle->SetNdivisions(505,"X");
  gStyle->SetNdivisions(505,"Y");
  gStyle->SetTitleFont(132,"X");
  gStyle->SetLabelFont(132,"X");
  gStyle->SetTitleFont(132,"Y");
  gStyle->SetLabelFont(132,"Y");
  gStyle->SetTitleSize(0.05,"X");
  gStyle->SetTitleOffset(1.2,"X");
  gStyle->SetLabelSize(0.05,"X");
  gStyle->SetTitleSize(0.05,"Y");
  gStyle->SetTitleOffset(0.9,"Y");
  gStyle->SetLabelSize(0.05,"Y");
  gStyle->SetOptStat(0);
  gStyle->SetOptDate(0);
  
  gStyle->SetPadLeftMargin(0.1);
  gStyle->SetPadRightMargin(0.05);
  gStyle->SetPadBottomMargin(0.15);
  gStyle->SetPadTickX(1);
  gStyle->SetPadTickY(1);
  gStyle->SetTickLength(0.015,"X");
  gStyle->SetTickLength(0.015,"Y");
}

TH1F *drawFrame(Float_t xlow, Float_t ylow, Float_t xhigh, Float_t yhigh,
               TString xTitle="", TString yTitle="")
{
  TH1F *hFrame;

  if(gPad->GetLogy()==0) {
    hFrame = gPad->DrawFrame(xlow,ylow,xhigh,yhigh);
    hFrame->GetXaxis()->SetTitle(xTitle);
    hFrame->GetYaxis()->SetTitle(yTitle); }
  else {
    hFrame = gPad->DrawFrame(xlow,pow(10,ylow),xhigh,pow(10,yhigh));
    hFrame->GetXaxis()->SetTitle(xTitle);
    hFrame->GetYaxis()->SetTitle(yTitle); }

  if(ylow*yhigh<0.) {
    TLine *l = new TLine(xlow,0,xhigh,0);
    l->SetLineStyle(2);
    l->Draw(); }
  
  return hFrame;
}

TH1F *newTH1F(TString hName, TString hTitle,
              Int_t nBinsX, Float_t xlow, Float_t xhigh,
              Int_t fColor=1, Int_t fSumw2=1,
              Int_t fMarkerStyle=7, Float_t fMarkerSize=1)
{
  TH1F *hDummy = new TH1F(hName,hTitle,nBinsX,xlow,xhigh);
  hDummy->SetLineColor(fColor);
  //hDummy->SetLineWidth(2);
  hDummy->SetMarkerColor(fColor);
  hDummy->SetMarkerStyle(fMarkerStyle);
  hDummy->SetMarkerSize(fMarkerSize);

  if(fSumw2) { hDummy->Sumw2(); }
  else       { hDummy->SetFillColor(fColor);}
  
  hDummy->SetStats(0);
  
  return hDummy;
}

TH1D *newTH1D(TString hName, TString hTitle,
              Int_t nBinsX, Float_t xlow, Float_t xhigh,
              Int_t fColor=1, Int_t fSumw2=1,
              Int_t fMarkerStyle=7, Float_t fMarkerSize=1)
{
  TH1D *hDummy = new TH1D(hName,hTitle,nBinsX,xlow,xhigh);
  hDummy->SetLineColor(fColor);
  //hDummy->SetLineWidth(2);
  hDummy->SetMarkerColor(fColor);
  hDummy->SetMarkerStyle(fMarkerStyle);
  hDummy->SetMarkerSize(fMarkerSize);

  if(fSumw2) { hDummy->Sumw2(); }
  else       { hDummy->SetFillColor(fColor);}
  
  hDummy->SetStats(0);
  
  return hDummy;
}

TProfile *newTProfile(TString hName, TString hTitle,
		      Int_t nBinsX, Float_t xlow, Float_t xhigh,
		      TString opt="s",
		      Int_t fColor=1, Int_t fSumw2=1,
		      Int_t fMarkerStyle=7, Float_t fMarkerSize=1)
{
  TProfile *hDummy = new TProfile(hName,hTitle,nBinsX,xlow,xhigh,opt);
  hDummy->SetLineColor(fColor);
  //hDummy->SetLineWidth(2);
  hDummy->SetMarkerColor(fColor);
  hDummy->SetMarkerStyle(fMarkerStyle);
  hDummy->SetMarkerSize(fMarkerSize);
  
  hDummy->SetStats(0);
  
  return hDummy;
}

TH2F *newTH2F(TString fName, TString fTitle, 
	      Int_t fNBinsX, Double_t fNXlow, Double_t fNXhigh,
	      Int_t fNBinsY, Double_t fNYlow, Double_t fNYhigh,
	      Int_t fColor=1, Int_t fMarkerStyle=7, Int_t fMarkerSize=1)
{
  TH2F *hDummy = new TH2F(fName,fTitle,fNBinsX,fNXlow,fNXhigh,
			  fNBinsY,fNYlow,fNYhigh);

  hDummy->SetLineColor(fColor);
  hDummy->SetMarkerColor(fColor);
  hDummy->SetMarkerStyle(fMarkerStyle);
  hDummy->SetMarkerSize(fMarkerSize);

  hDummy->SetStats(0);
  
  return hDummy;
}

void newTLatex(Float_t x, Float_t y, TString fText, Int_t fColor=1, 
	       Int_t fAlign=21, Float_t fSize, Float_t fAngle=0)
{
  TLatex *l = new TLatex(x,y,fText);
  
  l->SetTextColor(fColor);
  l->SetTextAlign(fAlign);
  l->SetTextSize(fSize);
  l->SetTextAngle(fAngle);

  l->Draw();  
}

void drawTitle(double xpos = 0.05, double ypos = 0.075, TString fTitle="",
	       int color=1,int align=12, double size=0.045, double angle=0)
{
  double x0 = gPad->GetFrame()->GetX1();
  double x1 = gPad->GetFrame()->GetX2();
  double y0 = gPad->GetFrame()->GetY1();
  double y1 = gPad->GetFrame()->GetY2();
  double dx = x1-x0;
  double dy = y1-y0;
  
  newTLatex(x0+xpos*dx,y1-ypos*dy,fTitle,color,align,size,angle);
}

void newTMarker(double xpos = 0.05, double ypos = 0.075, int style=7,
		int color=1, double size=1.0)
{
  double x0 = gPad->GetFrame()->GetX1();
  double x1 = gPad->GetFrame()->GetX2();
  double y0 = gPad->GetFrame()->GetY1();
  double y1 = gPad->GetFrame()->GetY2();
  double dx = x1-x0;
  double dy = y1-y0;
  
  TMarker *m = new TMarker(x0+xpos*dx,y1-ypos*dy,style);
  m->SetMarkerColor(color);
  m->SetMarkerSize(size);
  m->Draw();
}

void newTBox(double xpos0 = 0.05, double ypos0 = 0.075,
	     double xpos1 = 0.05, double ypos1 = 0.075,
	     int lcolor=1, int fcolor=1, int style=7)
{
  double x0 = gPad->GetFrame()->GetX1();
  double x1 = gPad->GetFrame()->GetX2();
  double y0 = gPad->GetFrame()->GetY1();
  double y1 = gPad->GetFrame()->GetY2();
  double dx = x1-x0;
  double dy = y1-y0;
  
  TBox *b = new TBox(x0+xpos0*dx,y1-ypos0*dy,x0+xpos1*dx,y1-ypos1*dy);
  b->SetLineColor(lcolor);
  b->SetFillColor(fcolor);
  b->SetFillStyle(style);
  b->Draw();
}

void progress(int iEvent, int total_events, int ndiv=10)
{
  if(iEvent%(total_events/ndiv)==0) {
    cout << "Progress: " << iEvent/(total_events/100)
         << "%     \r" << flush;
    if(gROOT->IsBatch()) { cout << endl; }
  }
}



// 3D histogram normalization function
//______________________________________________________________________________________
void normalize(TH3* _FG11, TH3* _FG22, TH3* _FG1122, TH3* _FG12, TH3* _BG11, TH3* _BG22, TH3* _BG1122, TH3* _BG12)
{
    
    cout << "normalize: _FG12 = " << _FG12 << endl;
    _FG11->GetZaxis()->SetRange(2,3);
    _FG22->GetZaxis()->SetRange(2,3);
    _FG12->GetZaxis()->SetRange(2,3);
    _FG1122->GetZaxis()->SetRange(2,3);
    _BG11->GetZaxis()->SetRange(2,3);
    _BG22->GetZaxis()->SetRange(2,3);
    _BG12->GetZaxis()->SetRange(2,3);
    _BG1122->GetZaxis()->SetRange(2,3);
    
    TH2* FG11 = (TH2*) _FG11->Project3D("yx")->Clone("_FG11");
    TH2* FG22 = (TH2*) _FG22->Project3D("yx")->Clone("_FG22");
    //TH2* FG12 = (TH2*) _FG12->Project3D("yx")->Clone("_FG12");
    TH2* BG11 = (TH2*) _BG11->Project3D("yx")->Clone("_BG11");
    TH2* BG22 = (TH2*) _BG22->Project3D("yx")->Clone("_BG22");
    TH2* BG12 = (TH2*) _BG12->Project3D("yx")->Clone("_BG12");
    
    double nFG1=0.0, nFG2= 0.0, nBG1= 0.0, nBG2= 0.0;
    double nFG1_err=0.0, nFG2_err=0.0, nBG1_err=0.0, nBG2_err=0.0;
    
    cout << "Looping through 2d bins" << endl;
    for (int ptbin=1; ptbin<=FG11->GetNbinsY(); ptbin++)
    {
        for (int mbin=1; mbin<=FG11->GetNbinsX(); mbin++)
        {
            
            const double _mass = FG11->GetXaxis()->GetBinCenter(mbin);
            const double _pt = FG11->GetYaxis()->GetBinCenter(ptbin);
            if ( inNregionTorsten(_mass, _pt) )
                //if ( inNregionMGt700mev(_mass,_pt) )
                //if ( inNregion600mevTo900Mev(_mass,_pt) )
            {
                // Normalization constants
                nFG1  += FG11->GetBinContent(mbin,ptbin);
                nFG2  += FG22->GetBinContent(mbin,ptbin);
                nBG1  += BG11->GetBinContent(mbin,ptbin);
                nBG2  += BG22->GetBinContent(mbin,ptbin);
                // Normalization stat error
                nFG1_err += pow(FG11->GetBinError(mbin,ptbin),2);
                nFG2_err += pow(FG22->GetBinError(mbin,ptbin),2);
                nBG1_err += pow(BG11->GetBinError(mbin,ptbin),2);
                nBG2_err += pow(BG22->GetBinError(mbin,ptbin),2);
            }
            
        }
    }
    
    // Calculate stat error
    nFG1_err = sqrt(nFG1_err);
    nFG2_err = sqrt(nFG2_err);
    nBG1_err = sqrt(nBG1_err);
    nBG2_err = sqrt(nBG2_err);
    const double error = sqrt(0.5 * (pow(nFG1_err/nFG1,2) + pow(nFG2_err/nFG2,2) + pow(nBG1_err/nBG1,2) + pow(nBG2_err/nBG2,2)));
    cout << "stat. error = " << 100*error << "%" << endl;
    const double error2 = sqrt(0.5 * (pow(nFG1_err/nFG1,2) + pow(nFG2_err/nFG2,2)));
    cout << "w/o BG error" << endl;
    cout << "stat. error = " << 100*error2 << "%" << endl;
    
    // Delta is used as a dest/delta on the normalization. Why?
    // const double BG_NORM = Dest : (Dest/Delta); // go figure
    const double Delta= BG12->Integral() / (2*sqrt(BG11->Integral()*BG22->Integral()));
    cout << "What the hell is Delta: " << Delta << endl;
    
    cout << "Calculating normalization: scaling bg histos" << endl;
    const double BG_NORM = sqrt(nFG1*nFG2) / sqrt(nBG1*nBG2);
    
    cout << "Normalization = " << BG_NORM << " Â± " << BG_NORM*error2 << endl;
    _BG11->Scale(BG_NORM);
    _BG22->Scale(BG_NORM);
    _BG1122->Scale(BG_NORM);
    _BG12->Scale(BG_NORM/Delta);
    //_BG12->Scale(BG_NORM);
    
}


//___________________________________________
bool inNregionTorsten(const double mass, const double pt)
{
    return ( (mass>0.35) && (pt-2.33*mass<=-0.27) && (pt-0.9*mass>=0.01) && ( hypot(mass,pt) < (1.5*1.5) ) );
}
